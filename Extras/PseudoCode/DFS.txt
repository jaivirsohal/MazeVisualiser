procedure DFS(maze, startX, startY)
   //initialize the visited array and the stack
   visited = arr[maze.length][maze[0].length]
   stack = []

   //push the start point onto the stack
   stack.push([startX, startY])

   //while the stack is not empty
   while stack.length != 0
      //pop and retrieve cell from the stack
      [currentX, currentY] = stack.pop()
      
      //check if the cell is valid and unvisited
      if currentX >= 0 and currentX < maze.length and currentY >= 0 and currentY < maze.length and current != visited[currentX][currentY] then
         //mark the cell as visited
         visited[currentX][currentY] = true

         //try to move in all possible directions (up,down,left,right)
         foreach direction in {{-1, 0}, {1, 0}, {0, -1}, {0, 1}}
            newX = currentX + direction[0]
            newY = currentY + direction[1]

            //if the new cell is valid and unvisited, push it onto the stack
            if newX >= 0 and newX < maze.length and newY >= 0 and newY < maze[0].length and new != visited[newX][newY] then
               stack.push([newX, newY])
            endif
         next direction
      endif
   endwhile

   //return the visited array (solved)
   return visited
endprocedure